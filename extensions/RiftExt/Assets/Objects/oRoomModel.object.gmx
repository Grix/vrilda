<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oDrawable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 
    
    MyModel = d3d_model_create();
    d3d_model_primitive_begin(MyModel, pr_trianglelist);

    var i, j, width, height, color;
    
    color = c_white;
    width = room_width/32;
    height = room_height/32;
    
    for( i=0; i&lt;width; ++i )
    {
        for( j=0; j&lt;height; ++j )
        {
            if ( tile_layer_find(0, i*32+16, j*32+16) )
            {
            
                d3d_model_vertex_normal_texture_colour(MyModel, i*3+3, 0, j*3, 0, 1, 0, 0.5, 0, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3, 0, j*3, 0, 1, 0, 0, 0, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3+3, 0, j*3+3, 0, 1, 0, 0.5, 0.5, color, 1.0);
                
                d3d_model_vertex_normal_texture_colour(MyModel, i*3+3, 0, j*3+3, 0, 1, 0, 0.5, 0.5, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3, 0, j*3, 0, 1, 0, 0, 0, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3, 0, j*3+3, 0, 1, 0, 0, 0.5, color, 1.0);
                
                d3d_model_vertex_normal_texture_colour(MyModel, i*3, 3, j*3, 0, -1, 0, 0, 0, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3+3, 3, j*3, 0, -1, 0, 0.5, 0, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3+3, 3, j*3+3, 0, -1, 0, 0.5, 0.5, color, 1.0);
                
                d3d_model_vertex_normal_texture_colour(MyModel, i*3, 3, j*3, 0, -1, 0, 0, 0, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3+3, 3, j*3+3, 0, -1, 0, 0.5, 0.5, color, 1.0);
                d3d_model_vertex_normal_texture_colour(MyModel, i*3, 3, j*3+3, 0, -1, 0, 0, 0.5, color, 1.0);
                
                if ( tile_layer_find(0, i*32-16, j*32+16) == -1 )
                {
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3, 3, j*3, 1, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3, 3, j*3+3, 1, 1);
                
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3, 3, j*3+3, 1, 1);
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3+3, 0.5, 1);                    
                }
                
                if ( tile_layer_find(0, i*32+48, j*32+16) == -1 )
                {
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3, 1, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3+3, 0, j*3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3+3, 1, 1);
                
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3+3, 1, 1);
                    d3d_model_vertex_texture(MyModel, i*3+3, 0, j*3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3+3, 0, j*3+3, 0.5, 1);                    
                }
                
                if ( tile_layer_find(0, i*32+16, j*32-16) == -1 )
                {
                    d3d_model_vertex_texture(MyModel, i*3, 3, j*3, 1, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3, 0.5, 0.5);       
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3, 1, 1);
                
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3, 1, 1);
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3+3, 0, j*3, 0.5, 1);                    
                }
                
                if ( tile_layer_find(0, i*32+16, j*32+48) == -1 )
                {
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3+3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3, 3, j*3+3, 1, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3+3, 1, 1);
                
                    d3d_model_vertex_texture(MyModel, i*3, 0, j*3+3, 0.5, 0.5);
                    d3d_model_vertex_texture(MyModel, i*3+3, 3, j*3+3, 1, 1);
                    d3d_model_vertex_texture(MyModel, i*3+3, 0, j*3+3, 0.5, 1);                    
                }
            }
        
        }   
    }
    
    d3d_model_primitive_end(MyModel);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* called by rift game to do the drawing */

d3d_model_draw(MyModel, 0, 0, 0, sprite_get_texture(sprWallFloor, 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_3d_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (controller.skybox == 0)
    {
    
    }
else if (controller.skybox == 1)
    {
    skybox_floor = background_get_texture(bck_sky1_floor);
    skybox_top = sprite_get_texture(spr_sky1_top,0);
    skybox_right = sprite_get_texture(spr_sky1_right,0);
    skybox_left = sprite_get_texture(spr_sky1_left,0);
    skybox_back = sprite_get_texture(spr_sky1_back,0);
    skybox_front = sprite_get_texture(spr_sky1_front,0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>range = GMO_getCameraZFar();
tilesize = 128
floors=0
z = obj_camera.z;
x = obj_camera.x;
y = obj_camera.y;

texture_set_repeat(0);
d3d_set_culling(false);


/*//Draw big tiles
for (yy = -range; yy &lt; range; yy+=tilesize*4) {
    for (xx = -range; xx &lt; range; xx+=tilesize*4) {
        //if (CAM_FRUSTUM) {
        if (0) {
            maydraw = frustum_culling(xx, yy, z+1, tilesize*sqrt(2));
        } else {
            maydraw = (point_distance(xx,yy,obj_camera.x,obj_camera.y)&lt;GMO_getCameraZFar())
        }
        if maydraw { 
            //Draw loose tiles for when the player is close (lighting)
            d3d_draw_floor(xx+tilesize*8/2,yy+tilesize*8/2,z,xx-tilesize*8/2,yy-tilesize*8/2,z,background_make_texture(bck_wall),4,4);
            floors++;
        }
    }
}

for (yy = -range; yy &lt; range; yy+=tilesize) {
    for (xx = -range; xx &lt; range; xx+=tilesize) {
        //if (CAM_FRUSTUM) {
        if (0) {
            maydraw = frustum_culling(xx, yy, z+1, tilesize*sqrt(2));
        } else {
            maydraw = (point_distance(xx,yy,obj_camera.x,obj_camera.y)&lt;GMO_getCameraZFar()/4)
        }
        if maydraw { 
            //Draw loose tiles for when the player is close (lighting)
            d3d_draw_floor(xx+tilesize/2,yy+tilesize/2,z+1,xx-tilesize/2,yy-tilesize/2,z+1,background_make_texture(bck_wall),1,1);
            floors++;
        }
    }
}*/
/*draw_set_color(c_white);
d3d_draw_floor(0-controller.rwidth,0-controller.rlength,0,room_width+controller.rwidth,room_height+controller.rlength,0,background_get_texture(bck_wall),-1,-1);
d3d_draw_floor(0-controller.rwidth,0-controller.rlength,controller.rheight,room_width+controller.rwidth,room_height+controller.rlength,controller.rheight,background_get_texture(bck_wall),-1,-1);
d3d_draw_wall(0-controller.rwidth,0-controller.rlength,0,room_width+controller.rwidth,0-controller.rlength,controller.rheight,background_get_texture(bck_wall),-1,-1);
d3d_draw_wall(0-controller.rwidth,0-controller.rlength,0,0-controller.rwidth,room_height+controller.rlength,controller.rheight,background_get_texture(bck_wall),-1,-1);
d3d_draw_wall(room_width+controller.rwidth,room_height+controller.rlength,0,room_width+controller.rwidth,0-controller.rlength,controller.rheight,background_get_texture(bck_wall),-1,-1);
d3d_draw_wall(room_width+controller.rwidth,room_height+controller.rlength,0,0-controller.rwidth,room_height+controller.rlength,controller.rheight,background_get_texture(bck_wall),-1,-1);
*/
d3d_set_hidden(false);
d3d_set_lighting(false);
d3d_draw_floor(x-16.05,y-16.05,z+15.95,x+16.05,y+16.05,z+15.95,skybox_top,1,1);
d3d_draw_floor(x+16,y+16,z+16,x-16,y-16,z-16,skybox_floor,1,1);
d3d_draw_wall(x+16,y-16,z+16,x-16,y-16,z-16,skybox_front,1,1);
d3d_draw_wall(x+16,y+16,z+16,x+16,y-16,z-16,skybox_left,1,1);
d3d_draw_wall(x-16,y+16,z+16,x+16,y+16,z-16,skybox_back,1,1);
d3d_draw_wall(x-16,y-16,z+16,x-16,y+16,z-16,skybox_right,1,1);
d3d_set_lighting(true);
d3d_set_hidden(true);

/*if (instance_exists(obj_scanner))
    for( i=0; i&lt;=(ds_list_size(controller.scan_list)-1); i++)
        {
        d3d_draw_block(obj_scanner.x+20,obj_scanner.y,obj_scanner.z-5,obj_scanner.x-20,obj_scanner.y+40,obj_scanner.z+5,background_get_texture(bck_scanner),1,1);
        }*/
    
    
d3d_set_culling(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

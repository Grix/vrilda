<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_miniscanner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rdy = 0;
alarm[0] = 1;
moving = 0;
mode = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
dual = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),0);
if (mode == 2)
    {
    if (master == 1)
        {
        x = 300+ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),1)/2;
        y = 300-ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),2)/2;
        xrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),3);
        yrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),4);
        alpha = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),5);
        angle = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),6);
        }
    else
        {
        x = 600-ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),1)/2;
        y = 300-ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),2)/2;
        xrad = -ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),3);
        yrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),4);
        alpha = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),5);
        angle = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),6);
        }
    }
else if (mode == 3)
    {
    if (master == 1)
        {
        x = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),1)/2;
        y = 300+ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),7)/2;
        xrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),3);
        yrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),4);
        alpha = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),5);
        angle = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),6);
        }
    else
        {
        x = 300-ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),1)/2;
        y = 300+ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),7)/2;
        xrad = -ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),3);
        yrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),4);
        alpha = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),5);
        angle = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),6);
        }
    }
else if (mode == 4)
    {
    if (master == 1)
        {
        x = 600-ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),7)/2;
        y = 600-ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),2)/2;
        xrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),3);
        yrad = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),4);
        alpha = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),5);
        angle = ds_list_find_value(ds_list_find_value(controller.scan_list,scanner),6);
        }
    }
    
rdy = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!rdy)
    exit;

if (mode == 2)
    {
    if ((moving == 1) and (controller.selected_scanner == scanner))
        {
        if (keyboard_check(vk_shift))
            {
            alpha += (mouse_x-mouse_xprevious)/100;
            if (alpha &gt; 0.5) alpha = 0.5;
            if (alpha &lt; 0.05) alpha = 0.05;
            angle += (mouse_y-mouse_yprevious)/100;
            if (angle &gt; pi/3.5) angle = pi/3.5;
            if (angle &lt; 0.05) angle = 0.05;
            }
        else
            {
            x += mouse_x-mouse_xprevious;
            y += mouse_y-mouse_yprevious;
            if (x &lt; 5) x = 5;
            if (x &gt; 595) x = 595;
            if (y &lt; 5) y = 5;
            if (y &gt; 595) y = 595;
            
            if ((dual == 1) and (master == 1))
                {
                slave.x -= mouse_x-mouse_xprevious;
                slave.y += mouse_y-mouse_yprevious;
                if (slave.x &lt; 5) slave.x = 5;
                if (slave.x &gt; 595) slave.x = 595;
                if (slave.y &lt; 5) slave.y = 5;
                if (slave.y &gt; 595) slave.y = 595;
                }
            }
        
        mouse_xprevious = mouse_x;
        mouse_yprevious = mouse_y;
        }
    else if ((moving == 2) and (controller.selected_scanner == scanner))
        {
        if (keyboard_check(vk_shift))
            {
            alpha += (mouse_x-mouse_xprevious)/100;
            if (alpha &gt; 0.5) alpha = 0.5;
            if (alpha &lt; 0.05) alpha = 0.05;
            angle += (mouse_y-mouse_yprevious)/100;
            if (angle &gt; pi/3.5) angle = pi/3.5;
            if (angle &lt; 0.05) angle = 0.05;
            }
        else
            {
            xrad += degtorad((mouse_x-mouse_xprevious)/2);
            yrad -= degtorad((mouse_y-mouse_yprevious)/2);
            if (xrad &lt; -pi/4) xrad = -pi/4;
            if (xrad &gt; pi/4) xrad = pi/4;
            if (yrad &lt; -pi/4) yrad = -pi/4;
            if (yrad &gt; pi/4) yrad = pi/4;
            
            if ((dual == 1) and (master == 1))
                {
                slave.xrad -= degtorad((mouse_x-mouse_xprevious)/2);
                slave.yrad -= degtorad((mouse_y-mouse_yprevious)/2);
                if (slave.xrad &lt; -pi/4) slave.xrad = -pi/4;
                if (slave.xrad &gt; pi/4) slave.xrad = pi/4;
                if (slave.yrad &lt; -pi/4) slave.yrad = -pi/4;
                if (slave.yrad &gt; pi/4) slave.yrad = pi/4;
                }
            }
            
        mouse_xprevious = mouse_x;
        mouse_yprevious = mouse_y;
        }
    }
else if (mode == 3)
    {
    if ((moving == 1) and (controller.selected_scanner == scanner))
        {
        if (keyboard_check(vk_shift))
            {
            alpha += (mouse_x-mouse_xprevious)/100;
            if (alpha &gt; 0.5) alpha = 0.5;
            if (alpha &lt; 0.05) alpha = 0.05;
            angle += (mouse_y-mouse_yprevious)/100;
            if (angle &gt; pi/3.5) angle = pi/3.5;
            if (angle &lt; 0.05) angle = 0.05;
            }
        else
            {
            x += mouse_x-mouse_xprevious;
            y += mouse_y-mouse_yprevious;
            if (x &lt; 5) x = 5;
            if (x &gt; 595) x = 595;
            if (y &lt; 5) y = 5;
            if (y &gt; 595) y = 595;
            
            if ((dual == 1) and (master == 1))
                {
                slave.x -= mouse_x-mouse_xprevious;
                slave.y += mouse_y-mouse_yprevious;
                if (slave.x &lt; 5) slave.x = 5;
                if (slave.x &gt; 595) slave.x = 595;
                if (slave.y &lt; 5) slave.y = 5;
                if (slave.y &gt; 595) slave.y = 595;
                }
            }
        
        mouse_xprevious = mouse_x;
        mouse_yprevious = mouse_y;
        }
    else if ((moving == 2) and (controller.selected_scanner == scanner))
        {
        if (keyboard_check(vk_shift))
            {
            alpha += (mouse_x-mouse_xprevious)/100;
            if (alpha &gt; 0.5) alpha = 0.5;
            if (alpha &lt; 0.05) alpha = 0.05;
            angle += (mouse_y-mouse_yprevious)/100;
            if (angle &gt; pi/3.5) angle = pi/3.5;
            if (angle &lt; 0.05) angle = 0.05;
            }
        else
            {
            xrad += degtorad((mouse_x-mouse_xprevious)/2);
            if (xrad &lt; -pi/4) xrad = -pi/4;
            if (xrad &gt; pi/4) xrad = pi/4;
            
            if ((dual == 1) and (master == 1))
                {
                slave.xrad -= degtorad((mouse_x-mouse_xprevious)/2);
                if (slave.xrad &lt; -pi/4) slave.xrad = -pi/4;
                if (slave.xrad &gt; pi/4) slave.xrad = pi/4;
                }
            }
        
        mouse_xprevious = mouse_x;
        mouse_yprevious = mouse_y;
        }
    }
else if (mode == 4)
    {
    if ((moving == 1) and (controller.selected_scanner == scanner))
        {
        if (keyboard_check(vk_shift))
            {
            alpha += (mouse_x-mouse_xprevious)/100;
            if (alpha &gt; 0.5) alpha = 0.5;
            if (alpha &lt; 0.05) alpha = 0.05;
            angle += (mouse_y-mouse_yprevious)/100;
            if (angle &gt; pi/3.5) angle = pi/3.5;
            if (angle &lt; 0.05) angle = 0.05;
            }
        else
            {
            x += mouse_x-mouse_xprevious;
            y += mouse_y-mouse_yprevious;
            if (x &lt; 5) x = 5;
            if (x &gt; 595) x = 595;
            if (y &lt; 5) y = 5;
            if (y &gt; 595) y = 595;
            }
        
        mouse_xprevious = mouse_x;
        mouse_yprevious = mouse_y;
        }
    else if ((moving == 2) and (controller.selected_scanner == scanner))
        {
        if (keyboard_check(vk_shift))
            {
            alpha += (mouse_x-mouse_xprevious)/100;
            if (alpha &gt; 0.5) alpha = 0.5;
            if (alpha &lt; 0.05) alpha = 0.05;
            angle += (mouse_y-mouse_yprevious)/100;
            if (angle &gt; pi/3.5) angle = pi/3.5;
            if (angle &lt; 0.05) angle = 0.05;
            }
        else
            {
            yrad -= degtorad((mouse_y-mouse_yprevious)/2);
            if (yrad &lt; -pi/4) yrad = -pi/4;
            if (yrad &gt; pi/4) yrad = pi/4;
            }
        
        mouse_xprevious = mouse_x;
        mouse_yprevious = mouse_y;
        }
    }
    
/*if (moving)
    {
    with (controller)
        check_miniscanner_dual();
    }*/
    
if ((mouse_x &gt; x-16) and (mouse_x &lt; x+16) and (mouse_y &gt; y-16) and (mouse_y &lt; y+16))
    {
    controller.tooltip = "Hold mouse button and drag to adjust the position of the scanner.#Hold shift to adjust brightness (mouse vertically) and scanning width (mouse horizontally).";
    }
if ((mouse_x &gt; x-16) and (mouse_x &lt; x+16) and (mouse_y &lt; y-20) and (mouse_y &gt; y-52))
    {
    controller.tooltip = "Hold mouse button and drag to adjust the scanning direction.#Hold shift to adjust brightness (mouse vertically) and scanning width (mouse horizontally).";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving = 0;

if (master == 1)
    {
    if (mode == 2)
        {
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),1,(x-300)*2);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),2,(300-y)*2);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),3,xrad);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),4,yrad);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),6,angle);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),5,alpha);
        }
    else if (mode == 3)
        {
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),1,x*2);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),7,(y-300)*2);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),3,xrad);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),6,angle);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),5,alpha);
        }
    else if (mode == 4)
        {
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),7,(600-x)*2);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),2,(600-y)*2);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),4,yrad);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),6,angle);
        ds_list_replace(ds_list_find_value(controller.scan_list,scanner),5,alpha);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((!rdy) || (!master))
    exit;

controller.selected_scanner = scanner;
if (mouse_y &gt; (y-18))
    moving = 1;
else 
    moving = 2;
mouse_xprevious = mouse_x;
mouse_yprevious = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (controller.rdy and rdy)
    {
    draw_set_font(fnt_parsing);
    draw_set_color(c_ltgray);
    draw_text(x-4,y-7,scanner);
    
    if (controller.selected_scanner == scanner)
        {
        if (master)
            draw_set_color(c_red);
        else draw_set_color(c_purple);
        }
    else
        {
        if (master)
            draw_set_color(c_ltgray);
        else draw_set_color(c_dkgray);
        }
    draw_circle(x,y,15,1);
    
    if (master)
        {
        draw_circle(x,y-35,15,1);
        draw_sprite(spr_angle,controller.rdy-2,x,y-35);
        }
    
    
    if (mode == 2)
        {    
        draw_set_alpha(alpha+0.3);
        
        if (angle/2 == pi/4)
            angle +=0.0001;
        
        divcp = cos(yrad+angle/2);
        if (divcp == 0)
            divcp = 0.000001;
        divcm = cos(yrad-angle/2);
        if (divcm == 0)
            divcm = 0.000001;
        
    
        xpos1 = x+25*(      sin(yrad+pi/2+angle/2)*cos(-xrad+pi/2+angle/2))/divcp;
        zpos1 = y+35+20*(   cos(yrad+pi/2+angle/2)); 
        xpos2 = x+25*(      sin(yrad+pi/2-angle/2)*cos(-xrad+pi/2+angle/2))/divcm;
        zpos2 = y+35+20*(   cos(yrad+pi/2-angle/2)); 
        xpos3 = x+25*(      sin(yrad+pi/2-angle/2)*cos(-xrad+pi/2-angle/2))/divcm;
        zpos3 = y+35+20*(   cos(yrad+pi/2-angle/2)); 
        xpos4 = x+25*(      sin(yrad+pi/2+angle/2)*cos(-xrad+pi/2-angle/2))/divcp;
        zpos4 = y+35+20*(   cos(yrad+pi/2+angle/2)); 
        
        draw_line(xpos2,zpos2,xpos1,zpos1);
        draw_line(xpos2,zpos2,xpos3,zpos3);
        draw_line(xpos3,zpos3,xpos4,zpos4);
        draw_line(xpos4,zpos4,xpos1,zpos1);
        draw_line(x,y+35,xpos1,zpos1);
        draw_line(x,y+35,xpos2,zpos2);
        draw_line(x,y+35,xpos3,zpos3);
        draw_line(x,y+35,xpos4,zpos4);
        
        draw_set_alpha(1);
        }
    else if (mode == 3)
        {
        if (controller.selected_scanner == scanner)
            {
            if (master)
                draw_set_color(c_red);
            else draw_set_color(c_purple);
            }
        else
            {
            if (master)
                draw_set_color(c_ltgray);
            else draw_set_color(c_dkgray);
            }
        draw_set_alpha_test(0);
        draw_set_alpha((alpha+0.3)/4);
        draw_triangle(x,y,x+300*cos(pi/2-xrad+angle/2),y+300*sin(pi/2-xrad+angle/2),x+300*cos(pi/2-xrad-angle/2),y+300*sin(pi/2-xrad-angle/2),0); 
        draw_set_color(c_white);
        draw_set_alpha(1);
        }
    else if (mode == 4)
        {
        if (controller.selected_scanner == scanner)
            {
            draw_set_color(c_red);
            }
        else
            {
            draw_set_color(c_ltgray);
            }
            
        draw_set_alpha_test(0);
        draw_set_alpha((alpha+0.3)/4);    
        draw_triangle(x,y,x+300*cos(pi+yrad+angle/2),y+300*sin(pi+yrad+angle/2),x+300*cos(pi+yrad-angle/2),y+300*sin(pi+yrad-angle/2),0);
        draw_set_color(c_white);
        draw_set_alpha(1);
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>

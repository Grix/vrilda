<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GR_init();

templist = ds_list_create();
scan_list = ds_list_create();

showfps = 30;
ildaloaded=0;
fog = 1;


// Initialize GMOculus
GMO_init(); 

alarm[1]=2;

tooltip = "";
frame = 0;
framefloat = 0;
rdy = 0;
rwidth = 0;
rheight = 1500;
rlength = 0;
play = 0;
audio = "song";
songloaded = 0;
fpswarning = 0;
needpal = 0;
progress = 0;
i = 0;
file_size = 0;
selected_scanner = -1;
xpnrad = 0;
ypnrad = 0;
zpnrad = 0;
skybox = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>read_ilda_work();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
rdy = 2;
check_miniscanner_dual();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fpswarning = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (rdy)
    {
    if (rdy == 1)
        {
        with (obj_miniscanner) instance_destroy();
        
        //Check audio sync
        if (rdy and play and songloaded and (((real(saud_position(audio))/1000*showfps - frame) &gt; 3 or (real(saud_position(audio))/1000*showfps - frame) &lt; -3))) 
            {
            frame = floor(real(saud_position(audio))/1000*showfps);
            framefloat = frame;
            }
            
        //Play/pause
        if (keyboard_check_pressed(vk_space))
            {
            if (saud_is_playing(audio))
                {
                saud_stop(audio);
                }
            else
                {
                saud_seek(floor(frame*1000/showfps),audio);
                }
            framefloat = frame;
            play = !play;
            }
            
        if (play)
            {
            framefloat += showfps/fps;
            frame = round(framefloat);
            }
            
        if (frame &gt; ds_list_size(ild_list)-11) 
            {
            frame = ds_list_size(ild_list)-11;
            framefloat = frame;
            }
        
        //Increase/decrease frame number
        if (keyboard_check(vk_right) and !keyboard_check(vk_control))
            {
            if (frame &lt; ds_list_size(ild_list)-11) frame++; //read_frame();
            framefloat = frame;
            }
        if (keyboard_check(vk_left) and !keyboard_check(vk_control))
            {
            if (frame) frame--; //read_frame();
            framefloat = frame;
            }
            
        //Stop and reset
        if (keyboard_check_pressed(vk_backspace))
            {
            frame = 0;
            saud_stop(audio);
            framefloat = frame;
            play = 0;
            }
                
        //Jump to frame
        if (keyboard_check_pressed(ord('N')))
            {
            seekto = get_integer("Enter frame number to skip to, 0 to "+string(ds_list_size(ild_list)-11),0);
            if ((seekto &gt;= 0) and (seekto &lt;= (ds_list_size(ild_list)-11)))
                {
                saud_stop(audio);
                play = 0;
                frame = seekto;
                framefloat = frame;
                }
            if (room == rm_3d)
                window_set_fullscreen(1);
            }
        }
    
    //Toggle 3D/2D
    if (keyboard_check_pressed(vk_tab))
        {
        if (room == rm_2d) room_goto_next(); 
        else room_goto_previous();
        }
    
    
    //screenshot
    if (keyboard_check_pressed(ord('M')))
        {
        ssfilename = get_save_filename_ext("*","*",working_directory,"Save screenshot");
        screen_save(ssfilename);
        if (room == rm_3d)
            window_set_fullscreen(1);
        }
    
    //Check fps
    if (room == rm_3d)
        {
        
        if (rdy and play and (fps &lt; 70))
            {
            fpswarning = 1;
            alarm[0] = 500;
            }
            
        //Toggle fog
         if (keyboard_check_pressed(ord('B')) and (room == rm_3d) and rdy)
            {
            fog = !fog;
            }

         //cycle skybox
         if (keyboard_check_pressed(ord('R')) and (room == rm_3d) and rdy)
            {
            skybox++;
            if (skybox &gt; 2)
                skybox = 1;
                with (obj_environment) instance_destroy();
            instance_create(0,0,obj_environment);
            }
            
         //IPD
        if (keyboard_check_direct(ord("L"))) 
            {
            GMO_setIPD(GMO_getIPD()+0.01);
            }
        if (keyboard_check_direct(ord("K"))) 
            {
            GMO_setIPD(GMO_getIPD()-0.01);
            }
            
       /* //Clamp room size
        if (rheight &lt; 100)
            rheight = 100;
        if (rwidth &lt; 200)
            rwidth = 200;
        if (rlength &lt; 200)
            rlength = 200;*/
            
        }
    else
        {
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_3d)
{
    //Start our 3D engine
    init3D();
    
    rdy = 1;

    instance_create(0,0,obj_scanner);
    
    window_set_cursor(cr_none);

    //window_set_fullscreen(1);
}
else
{
    end3D();
    window_set_cursor(cr_default);
    
    rdy = 2;
    check_miniscanner_dual();
    
    //window_set_fullscreen(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(application_surface);
    draw_info();
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_2d)
    {
    draw_clear(c_black);
    
    
    
    if (rdy == 1)
        {
        for( i=0; i&lt;=(ds_list_size(scan_list)-1); i++)
            draw_frame_2d(i);
        }
    else if (rdy == 3)
        draw_sprite(spr_eye,0,300,550);
    else if (rdy == 4)
        draw_sprite(spr_eye,1,50,300);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end3D();
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

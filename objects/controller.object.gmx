<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>version = "0.6.0";
version_date = "2015-10-06";

Init();

//setup file handling system
FStemp = game_save_id+"temp\";
if (directory_exists("temp"))
    {
    while (1)
        {
        file = file_find_first("temp\*", 0);
        show_debug_message(file)
        if (file == "") or is_undefined(file) or !is_string(file)
            break;
        if (!file_delete("temp\"+file))
            break;
        }
    }
else
    directory_create("temp");

templist = ds_list_create();
scan_list = ds_list_create();
draw_list = ds_list_create();

setup_surf1 = surface_create(512,512);
setup_surf2 = surface_create(512,512);
setup_surf3 = surface_create(512,512);
setup_surf4 = surface_create(512,512);
//surface_create(1024,1024);

u_time = shader_get_uniform(lasershader,"time");
u1_scanner_pos = shader_get_uniform(lasershader,"scanner_pos");
u1_player_pos = shader_get_uniform(lasershader,"player_pos");
u2_scanner_pos = shader_get_uniform(lasershader_nonoise,"scanner_pos");
u2_player_pos = shader_get_uniform(lasershader_nonoise,"player_pos");
u3_scanner_pos = shader_get_uniform(normalshader,"scanner_pos");
u3_player_pos = shader_get_uniform(normalshader,"player_pos");

showfps = 30;
ildaloaded=0;
fog = 1;
cango3d = 0;
time = 0;
refresh_setup_surf = 1;

alarm[1]=2;

update_verbose = 0;
dialog_open = 0;
tooltip = "";
frame = 0;
framefloat = 0;
frameprev = -1;
rdy = 0;
rwidth = 0;
rheight = 1500;
rlength = 0;
play = 0;
audio = "song";
songloaded = 0;
fpswarning = 0;
needpal = 0;
progress = 0;
i = 0;
file_size = 0;
selected_scanner = -1;
xpnrad = 0;
ypnrad = 0;
zpnrad = 0;
skybox = 1;

update_check();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game end
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>read_ilda_work();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
rdy = 1;
check_miniscanner_dual();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fpswarning = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time += delta_time;

if (rdy)
    {
    //Check audio sync
    if (rdy and play and songloaded and (((real(saud_position(audio))/1000*showfps - framefloat) &gt; 3 or (real(saud_position(audio))/1000*showfps - framefloat) &lt; -3))) 
        {
        show_debug_message(string(framefloat) +"  "+string(frame) + "   " + string(real(saud_position(audio))/1000*showfps))
        frame = floor(real(saud_position(audio))/1000*showfps);
        framefloat = frame;
        }
        
    //Play/pause
    if (keyboard_check_pressed(vk_space))
        {
        if (saud_is_playing(audio))
            {
            saud_stop(audio);
            }
        else
            {
            saud_seek(floor(frame*1000/showfps),audio);
            }
        framefloat = frame;
        play = !play;
        }
        
    if (ildaloaded)
        {
        if (play)
            {
            framefloat += delta_time/1000000*showfps;
            frame = round(framefloat);
            }
            
        if (frame &gt; ds_list_size(ild_list)-11) 
            {
            frame = ds_list_size(ild_list)-11;
            framefloat = frame;
            }
        
        
        //Increase/decrease frame number
        if (keyboard_check(vk_right))
            {
            if (frame &lt; ds_list_size(ild_list)-11) frame++; //read_frame();
            framefloat = frame;
            }
        if (keyboard_check(vk_left))
            {
            if (frame) frame--; //read_frame();
            framefloat = frame;
            }
            
        //Stop and reset
        if (keyboard_check_pressed(vk_backspace))
            {
            frame = 0;
            saud_stop(audio);
            framefloat = frame;
            play = 0;
            }
                
        //Jump to frame
        if (keyboard_check_pressed(ord('N')))
            {
            seekto = get_integer("Enter frame number to skip to, 0 to "+string(ds_list_size(ild_list)-11),frame);
            if ((seekto &gt;= 0) and (seekto &lt;= (ds_list_size(ild_list)-11)))
                {
                saud_stop(audio);
                play = 0;
                frame = seekto;
                framefloat = frame;
                }
            }
        
        
        //Toggle 3D/2D
        if (keyboard_check_pressed(vk_tab))
            {
            if (room == rm_2d) 
                {
                //if (cango3d)
                    room_goto_next(); 
                }
            else room_goto_previous();
            }
        
        
        //screenshot
        if (keyboard_check_pressed(ord('M')))
            {
            ssfilename = get_save_filename_ext("","","","Save screenshot");
            if ((ssfilename != "") and !is_undefined(ssfilename))
                screen_save(ssfilename);
            }
        }
    
    //Check fps
    if (room == rm_3d)
        {
        if (rdy and play and (fps &lt; 70))
            {
            fpswarning = 1;
            alarm[0] = 500;
            }
            
        //Toggle fog
         if (keyboard_check_pressed(ord('F')) and (room == rm_3d) and rdy)
            {
            fog++;
            fog = fog%3;
            }

         //cycle skybox
         if (keyboard_check_pressed(ord('B')) and (room == rm_3d) and rdy)
            {
            skybox++;
            skybox = skybox%2;
            with (obj_environment) instance_destroy();
            instance_create(0,0,obj_environment);
            }
            
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dialog_open = 0;

//Get integer
var new_id = ds_map_find_value(async_load, "id");
if (new_id == getint)
    {
    if (dialog == "update")
        {
        updatecheckenabled = ds_map_find_value(async_load, "status");
        ini_filename = "settings.ini";
        ini_open(ini_filename);
        ini_write_real("main","updatecheck",updatecheckenabled);
        ini_close();
        if (updatecheckenabled)
            {
            updateget = http_get("https://raw.githubusercontent.com/Grix/vrlss/master/version.txt");
            }
        }  
 if ds_map_find_value(async_load, "status")
        {
        switch (dialog)
            {
            case "updatefound":
                {
                file = http_get_file("https://github.com/Grix/vrlss/raw/master/VRLSS-"+versionnew+"-Installer.exe","temp/update.exe");
                show_message_async("Download started, installation will start shortly..");
                break;
                }  
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "id") == updateget
    {
    if ds_map_find_value(async_load, "status") == 0
       {
       versionnew = ds_map_find_value(async_load, "result");
       show_debug_message("Checking version");
       if (versionnew != version)
            {
            dialog_yesno("updatefound","New version available: "+versionnew+"##Would you like to download and install the update?");
            }
       else if (update_verbose == 1)
            {
            show_message_async("Current version is up to date.");
            }
       }
    }
else if ds_map_find_value(async_load, "id") == file
    {
     if ds_map_find_value(async_load, "status") == 0
        {
        if (file_exists("temp/update.exe"))
            {
            if (alarm[4] == -1)
                {
                show_message_async("Launching installer");
                open_in_explorer(FStemp+"update.exe")
                alarm[4] = 60;
                }
            }
        else 
            {
            if (updatereceived == 0)
                {
                show_message_async("Failed to automatically download update. Opening download website..");
                open_in_explorer("https://github.com/Grix/vrlss/releases");
                updatereceived = 1;
                }
            }
         }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_3d)
    {
    rdy = 1;
    init3D();
    }
else if (room == rm_2d)
    {
    refreshframe = 1;
    end3D();
    window_set_cursor(cr_default);
    
    rdy = 2;
    check_miniscanner_dual();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RiftSystem_Shutdown();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_2d)
    {
    draw_clear(c_black);
    
    if (rdy)
        {
        draw_setup();
        
        draw_set_colour(c_white);
        draw_line(0,256,512,256);
        draw_line(256,0,256,512);
        draw_set_font(fnt_info);
        draw_text(10,230,"Show preview");
        draw_text(266,230,"Scanner arrangement: Seen from front");
        draw_text(10,266,"Scanner arrangement: Seen from top");
        draw_text(266,266,"Scanner arrangement: Seen from side");
        
        //topleft
        for( i=0; i&lt;=(ds_list_size(scan_list)-1); i++)
            draw_frame_2d(i);
            
        //topright
            
        //bottomleft
        draw_sprite(spr_eye,0,124,470);
        
        //bottomright
        draw_sprite(spr_eye,1,286,388);
        }
    draw_info();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = point_direction(x,y,mouse_x,mouse_y);
var x1, y1;
x1 = lengthdir_x(100,dir); 
y1 = lengthdir_y(100,dir); 
draw_set_color(c_red);
draw_line(x,y,lengthdir_x(100,point_direction(x,y,mouse_x,mouse_y)),lengthdir_y(100,point_direction(x,y,mouse_x,mouse_y)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end3D();
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
